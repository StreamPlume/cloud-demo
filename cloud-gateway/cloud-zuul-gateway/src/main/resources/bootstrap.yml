server:
  port: 8080
  servlet:
    session:
      cookie:
       # 自定义 cookie 解决 BadCredentialsException: Could not obtain access token 问题
       # 此问题表现为，访问客户端 client 对应的 url后，一直重复跳转到授权服务器login路径。
       # 具体原因是在访问client 对应的 url 后跳转到客户端 login路径，login发现没授权后，跳转到 授权服务器，授权服务器授权完成后，跳转到login，而由于没找到授权信息，又跳到授权服务器 login。
       # 触发原因：是因为在同一个域名下localhost下，授权服务器和资源服务器的 Cookie 名都是 JSESSIONID，
       # 导致在跳转到授权服务器后将资源服务器的 Cookie 覆盖了，再次跳转回去时授权服务器的 Cookie 对资源服务器无效，再次跳转到登录页面，该动作一直重复，导致授权失败
        name: ZUUL_SESSIONID


spring:
  application:
    name: cloud-zuul-gateway
  profiles:
        #   默认的profile为dev，其他环境通过指定启动参数使用不同的profile，比如：
        #   测试环境：java -jar eureka-server.jar --spring.profiles.active=test
        #   生产环境：java -jar eureka-server.jar --spring.profiles.active=prod
    active: dev

#  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#  +++++++++++++++++++++++++ start  profile.active = dev  +++++++++++++++++++++++
#  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
---

spring:
  profiles: dev
#  security:
#    user:
#      name: admin
#      password: admin
  cloud:
    # 开启通过注册中心来访问 cloud-config-server 服务的功能
    config:
      # 开启消息总线后，可以通过 actuator/bus-refresh/ 刷新配置，得到最新提交的配置。 然后 刷新 @RefreshScope 修饰的类
      discovery:
        enabled: true
        service-id:  cloud-config-server
      # 用来定位Git中的资源,例如 cloud-config-repo/cloud-modules/user-server/user-server-dev.yml
      # 需要加载多个配置文件，则多个配置文件用逗号分隔开就行
      name: common-config,cloud-zuul-gateway
      profile: ${spring.profiles.active:dev}
      label: master
      username: admin
      password: admin
    bus:
      # 开启 消息总线 bus stream   true|false
      enabled: true
      trace:
        enabled: true
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8


#  zipkin:
#    base-url: http://127.0.0.1:9411
#  rabbitmq:
##    host: 127.0.0.1
#    host: 192.168.0.105
#    port: 5672
#    username: guest
#    password: guest

auth-server: http://localhost:8900

security:
  oauth2:
#    sso:
#     可自定义登录页面
#      loginPath: /user/login
    client:
      client-id: client
      client-secret: 123456
      access-token-uri: ${auth-server}/oauth/token
      user-authorization-uri: ${auth-server}/oauth/authorize
#      grant-type: password
#      scope: app
    resource:
#      id: client
      # 客户端用来获得用户的凭证,一定要通过下面方法检查路径是否配置正确
      #  http://localhost:8900/user/me?access_token=0185cbd1-ec58-4e75-85ca-2458e2f00b83
      #  当此路径配置有问题时，会导致页面一直在 http://localhost:9003/login 往 http://localhost:9003/login 跳转，出现死循环，直至浏览器报错
      user-info-uri: http://localhost:8900/user/me

eureka:
  instance:
    prefer-ip-address: true
    status-page-url-path: /actuator/info
    health-check-url-path: /actuator/health
    metadata-map:
      user.name: ${spring.security.user.name}
      user.password: ${spring.security.user.password}
  client:
    serviceUrl:
      defaultZone: http://admin:admin@127.0.0.1:8761/eureka/
#       defaultZone: http://${spring.security.user.name}:${spring.security.user.password}@127.0.0.1:8761/eureka/
#      defaultZone: http://127.0.0.1:8761/eureka/
#      defaultZone: http://192.168.0.103:8761/eureka/
#      defaultZone: http://eureka.didispace.com/

# ================= spring mvc 返回 json字符配置信息
# 指定日期格式的格式
#spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
#spring.jackson.time-zone=GMT+8


management:
  endpoints:
    web:
      exposure:
        include: "*"
      cors:
        allowed-origins: "*"
        allowed-methods: "*"


#  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#  +++++++++++++++++++++++++ start  profile.active = prod  ++++++++++++++++++++++
#  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
---

spring:
  profiles: prod
  cloud:
    # 开启通过注册中心来访问 cloud-config-server 服务的功能
#    config:
#      discovery:
#        enabled: true
#        service-id: cloud-config-server
#      # 用来定位Git中的资源
#      name: cloud-simple
#      profile: ${spring.profiles.active:prod}
#      label: master
  zipkin:
    base-url: http://127.0.0.1:9411
eureka:
  client:
    serviceUrl:
      defaultZone: http://192.168.0.102:8761/eureka/

management:
  endpoints:
    web:
      exposure:
        include: "*"
      cors:
        allowed-origins: "*"
        allowed-methods: "*"